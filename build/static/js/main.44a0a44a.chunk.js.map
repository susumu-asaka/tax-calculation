{"version":3,"sources":["Actions.tsx","containers/Locations.tsx","components/Locations.tsx","reducer.tsx","components/App.tsx","configureStore.tsx","index.tsx"],"names":["URL","fetchLocations","_this","this","dispatch","getState","tslib_es6","locationsCache","locations","isFetching","type","reducer","state","client","res","_a","sent","body","fetchLocationsSuccess","error","error_1","Locations_Locations","Object","es","cache","onInit","react","reactstrap_es","length","style","opacity","map","location","index","key","Link","to","code","md","email","federalTaxId","cityName","address","cityState","phone","action","transactionsCache","preloadedState","store","redux","redux_thunk_es","react_dom","BrowserRouter","Route","exact","path","render","Redirect","component","document","getElementById"],"mappings":"2OAOaA,EAAM,4BAiDZ,SAASC,IAAhB,IAAAC,EAAAC,KAEE,OAAO,SAAOC,EAAUC,GAAQ,OAAAC,EAAA,EAAAJ,OAAA,sFACxBK,EAAiBF,IAAWE,eAC9BC,EAAYD,EAAeC,UAC1BD,EAAeE,YAAeD,EAA/B,YACFJ,EAzCG,CACLM,KAAM,yBACNC,QAAO,SAACC,GACN,OAAON,EAAA,KAAKM,EAAK,CAAEL,eAAgB,CAAEE,YAAY,yBAwCnC,gCAAMI,EAAA,IAAkBb,EAAG,6BAAjCc,EAAMC,EAAAC,OACZR,EAAYM,EAAIG,KAChBb,EAlCD,SAA+BI,GACpC,MAAO,CACLE,KAAM,wBACNC,QAAO,SAACC,GACN,OAAON,EAAA,KAAKM,EAAK,CAAEL,eAAgB,CAAEE,YAAY,EAAOD,UAASA,OA8BtDU,CAAsBV,mCAE/BJ,GAxB8Be,EAwBCC,EAvB9B,CACLV,KAAM,wBACNC,QAAO,SAACC,GACN,OAAON,EAAA,KAAKM,EAAK,CAAEL,eAAgB,CAAEE,YAAY,EAAOU,MAAKA,gCAJ5D,IAA+BA,mBCpB/B,IAAME,EAAYC,OAAAC,EAAA,EAAAD,CAlBzB,SAAyBP,GACvB,MAAO,CACLS,MAFuBT,EAAAR,iBAM3B,SAA4BH,GAA5B,IAAAF,EAAAC,KAEI,MAAO,CACLsB,OAAQ,kBAAAnB,EAAA,EAAAJ,OAAA,2BAAAI,EAAA,EAAAH,KAAA,SAAAY,GAAY,SAAAX,EAASH,aASVqB,CCNlB,SAAmBP,OAAES,EAAAT,EAAAS,OAC1BC,EADiCV,EAAAU,UAEjC,IAAMhB,EAAae,EAAMf,WACnBD,EAAYgB,EAAMhB,UAExB,OAAKA,EAMDkB,EAAA,cAACC,EAAA,EAAS,KACRD,EAAA,oCAAclB,EAAUoB,YACxBF,EAAA,qGAGAA,EAAA,cAACC,EAAA,EAAS,CAACE,MAAO,CAAEC,QAAUrB,EAAa,GAAM,IAE7CD,EAAUuB,IAAI,SAACC,EAAUC,GACvB,OAAAP,EAAA,cAACC,EAAA,EAAa,CAACO,IAAKD,GAClBP,EAAA,cAACS,EAAA,EAAI,CAACC,GAAI,iCAAiCJ,EAASK,MAClDX,EAAA,cAACC,EAAA,EAAG,KACFD,EAAA,cAACC,EAAA,EAAG,CAACW,GAAG,KAAKN,EAASO,OACtBb,EAAA,cAACC,EAAA,EAAG,CAACW,GAAG,KAAKN,EAASQ,cACtBd,EAAA,cAACC,EAAA,EAAG,CAACW,GAAG,KAa5B,SAAmBN,GACjB,IAAMS,EAAWT,EAASU,QAAQD,SAC5B7B,EAAQoB,EAASU,QAAQ9B,MAC/B,OAAI6B,EACQA,EAAQ,MAAM7B,EAEjBA,EAnBsB+B,CAAUX,IACvBN,EAAA,cAACC,EAAA,EAAG,CAACW,GAAG,KAAKN,EAASU,QAAQE,cAlB5ClB,EAAA,2DCnBC,SAASf,EACdC,EAIAiC,GAEA,YANA,IAAAjC,MAAA,CACEL,eAAgB,CAAEE,YAAY,GAC9BqC,kBAAmB,CAAErC,YAAY,KAI/BoC,EAAOlC,QACFkC,EAAOlC,QAAQC,GAGjBA,ECXT,ICKEmC,EDLIC,QCKJ,IAAAD,MAAA,CACExC,eAAgB,CAAEE,YAAY,GAC9BqC,kBAAmB,CAAErC,YAAY,KAG5Ba,OAAA2B,EAAA,EAAA3B,CAKLX,EAASoC,EAAgBzB,OAAA2B,EAAA,EAAA3B,CAAgB4B,EAAA,WCf7CC,EAAA,OACEzB,EAAA,cFIK,WACL,OACEA,EAAA,cAACH,EAAA,EAAQjB,EAAA,KAAK,CAAE0C,MAAKA,IACnBtB,EAAA,cAAC0B,EAAA,EAAa,KACZ1B,EAAA,yBACEA,EAAA,cAAC2B,EAAA,EAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,QAQdpB,EAR+B,aASxC,WAAM,OAAAV,EAAA,cAAC+B,EAAA,EAAQ,CAACrB,GAAIA,QARnBV,EAAA,cAAC2B,EAAA,EAAK,CAACE,KAAK,aAAaG,UAAWrC,OAO9C,IAAkBe,GEjBZ,MACJuB,SAASC,eAAe","file":"static/js/main.44a0a44a.chunk.js","sourcesContent":["import * as Redux from 'redux';\nimport * as superagent from 'superagent';\nimport { State } from './State';\nimport { Location } from './models/Entity';\nimport { ThunkAction } from 'redux-thunk';\nimport { Transaction } from './models/Transaction';\n\nexport const URL = 'http://localhost:3000/api';\n\n/**\n * General Action this application\n */\nexport interface Action extends Redux.Action {\n  type: string;\n  reducer(state: State): State;\n}\n\n/**\n * Returns `Action` to start fetching Transactions.\n */\nexport function fetchLocationsStart(): Action {\n  return {\n    type: 'FetchTransactionsStart',\n    reducer(state) {\n      return { ...state, locationsCache: { isFetching: true } };\n    }\n  };\n}\n\n/**\n * Return `Action` after successfully fetching Transactions.\n */\nexport function fetchLocationsSuccess(locations: Location[]): Action {\n  return {\n    type: 'FetchLocationsSuccess',\n    reducer(state) {\n      return { ...state, locationsCache: { isFetching: false, locations } };\n    }\n  };\n}\n\n/**\n * Return `Action` after failing to fetching locations.\n */\nexport function fetchLocationsFailure(error: any): Action {\n  return {\n    type: 'FetchLocationsFailure',\n    reducer(state) {\n      return { ...state, locationsCache: { isFetching: false, error } };\n    }\n  };\n}\n\n/**\n * Return `ThunkAction` to fetch locations.\n */\nexport function fetchLocations(\n): ThunkAction<Promise<void>, State, any, Action> {\n  return async (dispatch, getState) => {\n    const locationsCache = getState().locationsCache;\n    let locations = locationsCache.locations;\n    if (!locationsCache.isFetching && !locations) {\n      dispatch(fetchLocationsStart());\n      try {\n        const res = await superagent.get(`${URL}/locations`);\n        locations = res.body as Location[];\n        dispatch(fetchLocationsSuccess(locations));\n      } catch (error) {\n        dispatch(fetchLocationsFailure(error));\n      }\n    }\n  };\n}\n\n/**\n * Returns `Action` to start fetching Transactions.\n */\nexport function fetchTransactionsStart(): Action {\n  return {\n    type: 'FetchTransactionsStart',\n    reducer(state) {\n      return { ...state, transactionsCache: { isFetching: true } };\n    }\n  };\n}\n\n/**\n * Return `Action` after successfully fetching Transactions.\n */\nexport function fetchTransactionsSuccess(\n  transactions: Transaction[]\n): Action {\n  return {\n    type: 'FetchTransactionsSuccess',\n    reducer(state) {\n      return {\n        ...state,\n        transactionsCache: { isFetching: false, transactions }\n      };\n    }\n  };\n}\n\n/**\n * Return `Action` after failing to fetching Transactions.\n */\nexport function fetchTransactionsFailure(error: any): Action {\n  return {\n    type: 'FetchTransactionsFailure',\n    reducer(state) {\n      return { ...state, transactionsCache: { isFetching: false, error } };\n    }\n  };\n}\n\n/**\n * Return `ThunkAction` to fetch Transactions.\n */\nexport function fetchTransactions(\n  query: { [key: string]: string }\n): ThunkAction<Promise<void>, State, null, Action> {\n  return async (dispatch, getState) => {\n    dispatch(fetchTransactionsStart());\n    try {\n      const res = await superagent.get(`${URL}/transactions`)\n        .query(query);\n      const transactions = res.body as Transaction[];\n      dispatch(fetchTransactionsSuccess(transactions));\n    } catch (error) {\n      dispatch(fetchTransactionsFailure(error));\n    }\n  };\n}\n","import { State } from '../State';\nimport * as Component from '../components/Locations';\nimport { Action, fetchLocations } from '../Actions';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps({ locationsCache }: State): Partial<Component.Props> {\n  return {\n    cache: locationsCache\n  };\n}\n\nfunction mapDispatchToProps(dispatch: ThunkDispatch<State, any, Action>):\n  Partial<Component.Props> {\n    return {\n      onInit: async () => dispatch(fetchLocations())\n    };\n}\n\n/**\n * Locations component.\n * Input locations.\n * Output onClick(index).\n */\nexport const Locations = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Component.Locations);\n","import * as React from 'react';\nimport { Container, ListGroup, ListGroupItem, Row, Col } from 'reactstrap';\nimport { LocationsCache } from '../State';\nimport { Location } from '../models/Entity';\nimport { Link } from 'react-router-dom';\n\nexport type Props = {\n  cache: LocationsCache;\n  onInit(): void;\n};\n\n/**\n * Locations component.\n * Input locations.\n * Output\n *   onInit()\n *   onClick(index).\n */\nexport function Locations({ cache, onInit }: Props) {\n  onInit();\n  const isFetching = cache.isFetching;\n  const locations = cache.locations;\n\n  if (!locations) {\n    return (\n      <h2>Carregando...</h2>\n    );\n  } else {\n    return (\n      <Container>\n        <h2>Empresas({locations.length})</h2>\n        <p>\n          Clique sobre uma linha para abrir as transações da empresa desejada.\n        </p>\n        <ListGroup style={{ opacity: (isFetching ? 0.5 : 1) }}>\n          {\n            locations.map((location, index) =>\n              <ListGroupItem key={index}>\n                <Link to={`/transactions?companyLocation=${location.code}`}>\n                  <Row>\n                    <Col md=\"3\">{location.email}</Col>\n                    <Col md=\"3\">{location.federalTaxId}</Col>\n                    <Col md=\"3\">{cityState(location)}</Col>\n                    <Col md=\"3\">{location.address.phone}</Col>\n                  </Row>\n                </Link>\n              </ListGroupItem>\n            )\n          }\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\nfunction cityState(location: Location): string {\n  const cityName = location.address.cityName;\n  const state = location.address.state;\n  if (cityName) {\n    return `${cityName} - ${state}`;\n  } else {\n    return state;\n  }\n}\n","import { State } from './State';\nimport { Action } from './Actions';\n\n/**\n * Main reducer.\n */\nexport function reducer(\n  state: State = {\n    locationsCache: { isFetching: false },\n    transactionsCache: { isFetching: false }\n  },\n  action: Action\n): State {\n  if (action.reducer) {\n    return action.reducer(state);\n  }\n\n  return state;\n}\n","import * as React from 'react';\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\nimport { Locations } from '../containers/Locations';\nimport { configureStore } from '../configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\n/**\n * Main App\n */\nexport function App() {\n  return (\n    <Provider {...{ store }}>\n      <BrowserRouter>\n        <div>\n          <Route exact path=\"/\" render={redirect('/locations')} />\n          <Route path=\"/locations\" component={Locations} />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nfunction redirect(to: string) {\n  return () => <Redirect to={to} />;\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport reduxThunk, { ThunkDispatch } from 'redux-thunk';\nimport { reducer } from './reducer';\nimport { State } from './State';\nimport { Action } from './Actions';\n\n/**\n * configureStore\n * Configure `Store` and returns it.\n */\nexport function configureStore(\n  preloadedState: State = {\n    locationsCache: { isFetching: false },\n    transactionsCache: { isFetching: false }\n  }\n) {\n  return createStore<\n    State,\n    Action,\n    { dispatch: ThunkDispatch<State, {}, Action> },\n    {}\n  >(reducer, preloadedState, applyMiddleware(reduxThunk));\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}